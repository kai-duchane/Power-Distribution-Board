/*
 * Arduino Nano WS2812B LED Controller
 * Controls 16 LEDs based on relay states
 * Receives commands from RV1106 via Serial (9600 baud)
 * 
 * Commands:
 * r/R - All red (all relays OFF)
 * g/G - All green (all relays ON)
 * b/B - All blue (test)
 * w/W - All white (test)
 * o/O - All off
 * t/T - Test pattern
 * 0-9 - Control LED 0-9
 * A-F - Control LED 10-15
 * Following the LED number:
 *   G - Green (relay ON)
 *   R - Red (relay OFF)
 */

#include <Adafruit_NeoPixel.h>

#define LED_PIN     6
#define NUM_LEDS    16
#define BRIGHTNESS  128

Adafruit_NeoPixel strip = Adafruit_NeoPixel(NUM_LEDS, LED_PIN, NEO_GRB + NEO_KHZ800);

void setup() {
  // Initialize Serial
  Serial.begin(9600);
  
  // Initialize LED strip
  strip.begin();
  strip.setBrightness(BRIGHTNESS);
  strip.clear();
  strip.show();
  
  // Startup animation - 3 white flashes
  for(int i = 0; i < 3; i++) {
    setAllLEDs(255, 255, 255);
    delay(200);
    strip.clear();
    strip.show();
    delay(200);
  }
  
  // Set all LEDs to red (all relays OFF by default)
  setAllLEDs(255, 0, 0);
  
  Serial.println("Arduino LED Controller Ready");
  Serial.println("16 LEDs for 16 relays");
}

void loop() {
  static int ledIndex = -1;
  
  if (Serial.available() > 0) {
    char cmd = Serial.read();
    
    // Check if this is a LED index (0-9 or A-F)
    if (cmd >= '0' && cmd <= '9') {
      ledIndex = cmd - '0';
      return;  // Wait for next character (G or R)
    }
    else if (cmd >= 'A' && cmd <= 'F') {
      ledIndex = 10 + (cmd - 'A');
      return;  // Wait for next character (G or R)
    }
    
    // If we have a LED index waiting, this should be G or R
    if (ledIndex >= 0 && ledIndex < NUM_LEDS) {
      if (cmd == 'G' || cmd == 'g') {
        // Green - relay ON
        strip.setPixelColor(ledIndex, strip.Color(0, 255, 0));
        strip.show();
        Serial.print("LED ");
        Serial.print(ledIndex);
        Serial.println(" -> GREEN (ON)");
      }
      else if (cmd == 'R' || cmd == 'r') {
        // Red - relay OFF
        strip.setPixelColor(ledIndex, strip.Color(255, 0, 0));
        strip.show();
        Serial.print("LED ");
        Serial.print(ledIndex);
        Serial.println(" -> RED (OFF)");
      }
      ledIndex = -1;  // Reset
      return;
    }
    
    // Process single character commands
    switch(cmd) {
      case 'r':
      case 'R':
        if (ledIndex < 0) {  // Only if not waiting for G/R
          Serial.println("All LEDs -> RED");
          setAllLEDs(255, 0, 0);
          ledIndex = -1;
        }
        break;
        
      case 'g':
      case 'G':
        if (ledIndex < 0) {  // Only if not waiting for G/R
          Serial.println("All LEDs -> GREEN");
          setAllLEDs(0, 255, 0);
          ledIndex = -1;
        }
        break;
        
      case 'b':
      case 'B':
        Serial.println("All LEDs -> BLUE");
        setAllLEDs(0, 0, 255);
        ledIndex = -1;
        break;
        
      case 'w':
      case 'W':
        Serial.println("All LEDs -> WHITE");
        setAllLEDs(255, 255, 255);
        ledIndex = -1;
        break;
        
      case 'o':
      case 'O':
        Serial.println("All LEDs -> OFF");
        strip.clear();
        strip.show();
        ledIndex = -1;
        break;
        
      case 't':
      case 'T':
        Serial.println("Running test pattern...");
        testPattern();
        ledIndex = -1;
        break;
        
      case '\n':
      case '\r':
        // Ignore newlines
        break;
        
      default:
        if (cmd >= 32 && cmd <= 126) {  // Printable characters
          Serial.print("Unknown: ");
          Serial.println(cmd);
        }
        ledIndex = -1;
        break;
    }
  }
}

void setAllLEDs(uint8_t r, uint8_t g, uint8_t b) {
  for(int i = 0; i < NUM_LEDS; i++) {
    strip.setPixelColor(i, strip.Color(r, g, b));
  }
  strip.show();
}

void testPattern() {
  // Quick sweep through all colors
  // Red sweep
  for(int i = 0; i < NUM_LEDS; i++) {
    strip.clear();
    strip.setPixelColor(i, strip.Color(255, 0, 0));
    strip.show();
    delay(50);
  }
  
  // Green sweep
  for(int i = 0; i < NUM_LEDS; i++) {
    strip.clear();
    strip.setPixelColor(i, strip.Color(0, 255, 0));
    strip.show();
    delay(50);
  }
  
  // Blue sweep
  for(int i = 0; i < NUM_LEDS; i++) {
    strip.clear();
    strip.setPixelColor(i, strip.Color(0, 0, 255));
    strip.show();
    delay(50);
  }
  
  // Simulate relay states
  // Board 1 ON, Board 2 OFF
  for(int i = 0; i < 8; i++) {
    strip.setPixelColor(i, strip.Color(0, 255, 0));
  }
  for(int i = 8; i < 16; i++) {
    strip.setPixelColor(i, strip.Color(255, 0, 0));
  }
  strip.show();
  delay(1000);
  
  // Board 1 OFF, Board 2 ON
  for(int i = 0; i < 8; i++) {
    strip.setPixelColor(i, strip.Color(255, 0, 0));
  }
  for(int i = 8; i < 16; i++) {
    strip.setPixelColor(i, strip.Color(0, 255, 0));
  }
  strip.show();
  delay(1000);
  
  // All back to red (OFF)
  setAllLEDs(255, 0, 0);
  Serial.println("Test complete");
}
